Elm.Effects = Elm.Effects || {};
Elm.Effects.make = function (_elm) {
   "use strict";
   _elm.Effects = _elm.Effects || {};
   if (_elm.Effects.values)
   return _elm.Effects.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Effects",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Effects = Elm.Native.Effects.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var ignore = function (task) {
      return A2($Task.andThen,
      task,
      $Basics.always($Task.succeed({ctor: "_Tuple0"})));
   };
   var sequence_ = function (tasks) {
      return ignore($Task.sequence(tasks));
   };
   var requestAnimationFrame = $Native$Effects.requestAnimationFrame;
   var toTaskHelp = F3(function (address,
   _v0,
   effect) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 switch (effect.ctor)
                 {case "Batch":
                    return function () {
                         var $ = $List.unzip(A2($List.map,
                         A2(toTaskHelp,address,_v0),
                         effect._0)),
                         tasks = $._0,
                         toMsgLists = $._1;
                         return {ctor: "_Tuple2"
                                ,_0: sequence_(tasks)
                                ,_1: $List.concat(toMsgLists)};
                      }();
                    case "None": return _v0;
                    case "Task":
                    return function () {
                         var reporter = A2($Task.andThen,
                         effect._0,
                         $Signal.send(address));
                         return {ctor: "_Tuple2"
                                ,_0: A2($Task.andThen,
                                _v0._0,
                                $Basics.always(ignore($Task.spawn(reporter))))
                                ,_1: _v0._1};
                      }();
                    case "Tick":
                    return {ctor: "_Tuple2"
                           ,_0: _v0._0
                           ,_1: A2($List._op["::"],
                           effect._0,
                           _v0._1)};}
                 _U.badCase($moduleName,
                 "between lines 184 and 209");
              }();}
         _U.badCase($moduleName,
         "between lines 184 and 209");
      }();
   });
   var toTask = F2(function (address,
   effect) {
      return function () {
         var $ = A3(toTaskHelp,
         address,
         {ctor: "_Tuple2"
         ,_0: $Task.succeed({ctor: "_Tuple0"})
         ,_1: _L.fromArray([])},
         effect),
         combinedTask = $._0,
         tickMessages = $._1;
         var animationReport = function (time) {
            return sequence_($List.map(function (f) {
               return A2($Signal.send,
               address,
               f(time));
            })(tickMessages));
         };
         var animationRequests = requestAnimationFrame(animationReport);
         return A2($Task.andThen,
         combinedTask,
         $Basics.always(animationRequests));
      }();
   });
   var Never = function (a) {
      return {ctor: "Never",_0: a};
   };
   var Batch = function (a) {
      return {ctor: "Batch",_0: a};
   };
   var batch = Batch;
   var None = {ctor: "None"};
   var none = None;
   var Tick = function (a) {
      return {ctor: "Tick",_0: a};
   };
   var tick = Tick;
   var Task = function (a) {
      return {ctor: "Task",_0: a};
   };
   var task = Task;
   var map = F2(function (func,
   effect) {
      return function () {
         switch (effect.ctor)
         {case "Batch":
            return Batch(A2($List.map,
              map(func),
              effect._0));
            case "None": return None;
            case "Task":
            return Task(A2($Task.map,
              func,
              effect._0));
            case "Tick":
            return Tick(function ($) {
                 return func(effect._0($));
              });}
         _U.badCase($moduleName,
         "between lines 136 and 147");
      }();
   });
   _elm.Effects.values = {_op: _op
                         ,none: none
                         ,task: task
                         ,tick: tick
                         ,map: map
                         ,batch: batch
                         ,toTask: toTask};
   return _elm.Effects.values;
};