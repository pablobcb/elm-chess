Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var renderStatusBar = function (status) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([$Html.text(status)]));
   };
   var renderEmptySquare = A2($Html.td,
   _L.fromArray([$Html$Attributes.$class("cursorDefault")]),
   _L.fromArray([]));
   var getHtmlCode = function (piece) {
      return $Html.text($String.fromChar(function () {
         var _v0 = piece.figure;
         switch (_v0.ctor)
         {case "Bishop":
            return function () {
                 var _v1 = piece.color;
                 switch (_v1.ctor)
                 {case "Black":
                    return _U.chr("♝");
                    case "White":
                    return _U.chr("♗");}
                 _U.badCase($moduleName,
                 "between lines 46 and 50");
              }();
            case "King":
            return function () {
                 var _v2 = piece.color;
                 switch (_v2.ctor)
                 {case "Black":
                    return _U.chr("♚");
                    case "White":
                    return _U.chr("♔");}
                 _U.badCase($moduleName,
                 "between lines 34 and 38");
              }();
            case "Knight":
            return function () {
                 var _v3 = piece.color;
                 switch (_v3.ctor)
                 {case "Black":
                    return _U.chr("♞");
                    case "White":
                    return _U.chr("♘");}
                 _U.badCase($moduleName,
                 "between lines 50 and 54");
              }();
            case "Pawn":
            return function () {
                 var _v4 = piece.color;
                 switch (_v4.ctor)
                 {case "Black":
                    return _U.chr("♟");
                    case "White":
                    return _U.chr("♙");}
                 _U.badCase($moduleName,
                 "between lines 54 and 56");
              }();
            case "Queen":
            return function () {
                 var _v5 = piece.color;
                 switch (_v5.ctor)
                 {case "Black":
                    return _U.chr("♛");
                    case "White":
                    return _U.chr("♕");}
                 _U.badCase($moduleName,
                 "between lines 38 and 42");
              }();
            case "Rook":
            return function () {
                 var _v6 = piece.color;
                 switch (_v6.ctor)
                 {case "Black":
                    return _U.chr("♜");
                    case "White":
                    return _U.chr("♖");}
                 _U.badCase($moduleName,
                 "between lines 42 and 46");
              }();}
         _U.badCase($moduleName,
         "between lines 33 and 56");
      }()));
   };
   var renderGraveyard = function (player) {
      return function () {
         var renderPiece = function (piece) {
            return A2($Html.td,
            _L.fromArray([$Html$Attributes.$class("grave selectNone")]),
            _L.fromArray([getHtmlCode(piece)]));
         };
         var renderSquare = function (figure) {
            return function () {
               switch (figure.ctor)
               {case "Just":
                  return renderPiece(A2($Model.piece,
                    figure._0,
                    player.color));
                  case "Nothing":
                  return renderEmptySquare;}
               _U.badCase($moduleName,
               "between lines 105 and 113");
            }();
         };
         var renderRow = function (row) {
            return $Html.tr(_L.fromArray([]))(A2($List.map,
            renderSquare,
            row));
         };
         return A2($Html.table,
         _L.fromArray([$Html$Attributes.$class(F2(function (x,
         y) {
            return A2($Basics._op["++"],
            x,
            y);
         })("graveyard")($Basics.toString(player.color)))]),
         _L.fromArray([renderRow(A2($List.take,
                      8,
                      player.graveyard))
                      ,renderRow(A2($List.drop,
                      8,
                      player.graveyard))]));
      }();
   };
   var update = F2(function (action,
   board) {
      return function () {
         switch (action.ctor)
         {case "Click": return board;}
         _U.badCase($moduleName,
         "between lines 23 and 24");
      }();
   });
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   var renderBoard = F2(function (address,
   board) {
      return function () {
         var renderPiece = F2(function (piece,
         position) {
            return A2($Html.td,
            _L.fromArray([$Html$Attributes.$class("selectNone cursorGrab")
                         ,A2($Html$Events.onClick,
                         address,
                         Click(position))]),
            _L.fromArray([getHtmlCode(piece)]));
         });
         var renderSquare = function (position) {
            return function () {
               var piece = $Maybe$Extra.join(A2($Dict.get,
               position,
               board));
               return function () {
                  switch (piece.ctor)
                  {case "Just":
                     return A2(renderPiece,
                       piece._0,
                       position);
                     case "Nothing":
                     return renderEmptySquare;}
                  _U.badCase($moduleName,
                  "between lines 82 and 90");
               }();
            }();
         };
         var renderRow = function (positions) {
            return $Html.tr(_L.fromArray([]))(A2($List.map,
            renderSquare,
            positions));
         };
         var makePositions = A2($List.map,
         function (digit) {
            return A2($List.map,
            function (letter) {
               return A2(F2(function (v0,
               v1) {
                  return {ctor: "_Tuple2"
                         ,_0: v0
                         ,_1: v1};
               }),
               letter,
               digit);
            },
            _L.fromArray([_U.chr("A")
                         ,_U.chr("B")
                         ,_U.chr("C")
                         ,_U.chr("D")
                         ,_U.chr("E")
                         ,_U.chr("F")
                         ,_U.chr("G")
                         ,_U.chr("H")]));
         },
         _L.fromArray([_U.chr("1")
                      ,_U.chr("2")
                      ,_U.chr("3")
                      ,_U.chr("4")
                      ,_U.chr("5")
                      ,_U.chr("6")
                      ,_U.chr("7")
                      ,_U.chr("8")]));
         return $Html.table(_L.fromArray([$Html$Attributes.id("chessBoard")]))($List.map(renderRow)(makePositions));
      }();
   });
   var renderGame = F2(function (address,
   game) {
      return function () {
         var p2 = game.player2;
         var p1 = game.player1;
         return A2($Html.div,
         _L.fromArray([$Html$Attributes.id("game")]),
         _L.fromArray([renderGraveyard(p2)
                      ,A2(renderBoard,
                      address,
                      game.board)
                      ,renderGraveyard(p1)
                      ,renderStatusBar("breno")]));
      }();
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: $Model.makeInitialGame
                                     ,update: update
                                     ,view: renderGame});
   _elm.Main.values = {_op: _op
                      ,Click: Click
                      ,update: update
                      ,getHtmlCode: getHtmlCode
                      ,renderEmptySquare: renderEmptySquare
                      ,renderBoard: renderBoard
                      ,renderGraveyard: renderGraveyard
                      ,renderGame: renderGame
                      ,renderStatusBar: renderStatusBar
                      ,main: main};
   return _elm.Main.values;
};