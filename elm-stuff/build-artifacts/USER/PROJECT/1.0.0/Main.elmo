Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var getRow = F2(function (board,
   positions) {
      return A2($List.map,
      function (key) {
         return A2($Dict.get,
         key,
         board);
      },
      positions);
   });
   var getHtmlCode = function (piece) {
      return $Html.text($String.fromChar(function () {
         var _v0 = piece.figure;
         switch (_v0.ctor)
         {case "Bishop":
            return function () {
                 var _v1 = piece.color;
                 switch (_v1.ctor)
                 {case "Black":
                    return _U.chr("♝");
                    case "White":
                    return _U.chr("♗");}
                 _U.badCase($moduleName,
                 "between lines 46 and 50");
              }();
            case "King":
            return function () {
                 var _v2 = piece.color;
                 switch (_v2.ctor)
                 {case "Black":
                    return _U.chr("♚");
                    case "White":
                    return _U.chr("♔");}
                 _U.badCase($moduleName,
                 "between lines 34 and 38");
              }();
            case "Knight":
            return function () {
                 var _v3 = piece.color;
                 switch (_v3.ctor)
                 {case "Black":
                    return _U.chr("♞");
                    case "White":
                    return _U.chr("♘");}
                 _U.badCase($moduleName,
                 "between lines 50 and 54");
              }();
            case "Pawn":
            return function () {
                 var _v4 = piece.color;
                 switch (_v4.ctor)
                 {case "Black":
                    return _U.chr("♟");
                    case "White":
                    return _U.chr("♙");}
                 _U.badCase($moduleName,
                 "between lines 54 and 56");
              }();
            case "Queen":
            return function () {
                 var _v5 = piece.color;
                 switch (_v5.ctor)
                 {case "Black":
                    return _U.chr("♛");
                    case "White":
                    return _U.chr("♕");}
                 _U.badCase($moduleName,
                 "between lines 38 and 42");
              }();
            case "Rook":
            return function () {
                 var _v6 = piece.color;
                 switch (_v6.ctor)
                 {case "Black":
                    return _U.chr("♜");
                    case "White":
                    return _U.chr("♖");}
                 _U.badCase($moduleName,
                 "between lines 42 and 46");
              }();}
         _U.badCase($moduleName,
         "between lines 33 and 56");
      }()));
   };
   var renderSquare = function (piece) {
      return $Html.td(_L.fromArray([]))(function () {
         switch (piece.ctor)
         {case "Just":
            return _L.fromArray([getHtmlCode(piece._0)]);
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 61 and 63");
      }());
   };
   var renderRow = function (pieces) {
      return $Html.tr(_L.fromArray([]))(A2($List.map,
      function (piece) {
         return function () {
            switch (piece.ctor)
            {case "Just":
               return renderSquare(piece._0);
               case "Nothing":
               return A2($Html.td,
                 _L.fromArray([]),
                 _L.fromArray([]));}
            _U.badCase($moduleName,
            "between lines 69 and 71");
         }();
      },
      pieces));
   };
   var renderBoard = function (board) {
      return $Html.table(_L.fromArray([$Html$Attributes.id("chessBoard")]))(A2($List.map,
      function ($) {
         return renderRow(getRow(board)($));
      },
      _L.fromArray([_L.fromArray(["A1"
                                 ,"B1"
                                 ,"C1"
                                 ,"D1"
                                 ,"E1"
                                 ,"F1"
                                 ,"G1"
                                 ,"H1"])
                   ,_L.fromArray(["A2"
                                 ,"B2"
                                 ,"C2"
                                 ,"D2"
                                 ,"E2"
                                 ,"F2"
                                 ,"G2"
                                 ,"H2"])
                   ,_L.fromArray(["A3"
                                 ,"B3"
                                 ,"C3"
                                 ,"D3"
                                 ,"E3"
                                 ,"F3"
                                 ,"G3"
                                 ,"H3"])
                   ,_L.fromArray(["A4"
                                 ,"B4"
                                 ,"C4"
                                 ,"D4"
                                 ,"E4"
                                 ,"F4"
                                 ,"G4"
                                 ,"H4"])
                   ,_L.fromArray(["A5"
                                 ,"B5"
                                 ,"C5"
                                 ,"D5"
                                 ,"E5"
                                 ,"F5"
                                 ,"G5"
                                 ,"H5"])
                   ,_L.fromArray(["A6"
                                 ,"B6"
                                 ,"C6"
                                 ,"D6"
                                 ,"E6"
                                 ,"F6"
                                 ,"G6"
                                 ,"H6"])
                   ,_L.fromArray(["A7"
                                 ,"B7"
                                 ,"C7"
                                 ,"D7"
                                 ,"E7"
                                 ,"F7"
                                 ,"G7"
                                 ,"H7"])
                   ,_L.fromArray(["A8"
                                 ,"B8"
                                 ,"C8"
                                 ,"D8"
                                 ,"E8"
                                 ,"F8"
                                 ,"G8"
                                 ,"H8"])])));
   };
   var main = renderBoard($Model.makeInitialBoard);
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   _elm.Main.values = {_op: _op
                      ,Click: Click
                      ,getHtmlCode: getHtmlCode
                      ,renderSquare: renderSquare
                      ,renderRow: renderRow
                      ,getRow: getRow
                      ,renderBoard: renderBoard
                      ,main: main};
   return _elm.Main.values;
};