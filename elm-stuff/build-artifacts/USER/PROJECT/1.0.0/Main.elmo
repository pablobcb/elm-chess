Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maybe$Extra = Elm.Maybe.Extra.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var getHtmlCode = function (piece) {
      return $Html.text($String.fromChar(function () {
         var _v0 = piece.figure;
         switch (_v0.ctor)
         {case "Bishop":
            return function () {
                 var _v1 = piece.color;
                 switch (_v1.ctor)
                 {case "Black":
                    return _U.chr("♝");
                    case "White":
                    return _U.chr("♗");}
                 _U.badCase($moduleName,
                 "between lines 45 and 49");
              }();
            case "King":
            return function () {
                 var _v2 = piece.color;
                 switch (_v2.ctor)
                 {case "Black":
                    return _U.chr("♚");
                    case "White":
                    return _U.chr("♔");}
                 _U.badCase($moduleName,
                 "between lines 33 and 37");
              }();
            case "Knight":
            return function () {
                 var _v3 = piece.color;
                 switch (_v3.ctor)
                 {case "Black":
                    return _U.chr("♞");
                    case "White":
                    return _U.chr("♘");}
                 _U.badCase($moduleName,
                 "between lines 49 and 53");
              }();
            case "Pawn":
            return function () {
                 var _v4 = piece.color;
                 switch (_v4.ctor)
                 {case "Black":
                    return _U.chr("♟");
                    case "White":
                    return _U.chr("♙");}
                 _U.badCase($moduleName,
                 "between lines 53 and 55");
              }();
            case "Queen":
            return function () {
                 var _v5 = piece.color;
                 switch (_v5.ctor)
                 {case "Black":
                    return _U.chr("♛");
                    case "White":
                    return _U.chr("♕");}
                 _U.badCase($moduleName,
                 "between lines 37 and 41");
              }();
            case "Rook":
            return function () {
                 var _v6 = piece.color;
                 switch (_v6.ctor)
                 {case "Black":
                    return _U.chr("♜");
                    case "White":
                    return _U.chr("♖");}
                 _U.badCase($moduleName,
                 "between lines 41 and 45");
              }();}
         _U.badCase($moduleName,
         "between lines 32 and 55");
      }()));
   };
   var update = F2(function (action,
   board) {
      return function () {
         switch (action.ctor)
         {case "Click": return board;}
         _U.badCase($moduleName,
         "between lines 23 and 24");
      }();
   });
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   var renderBoard = F2(function (address,
   board) {
      return function () {
         var renderSquare = function (position) {
            return function () {
               var piece = $Maybe$Extra.join(A2($Dict.get,
               position,
               board));
               return function () {
                  switch (piece.ctor)
                  {case "Just":
                     return A2($Html.td,
                       _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                          ,_0: "cursor"
                                                                          ,_1: "grab"}]))
                                    ,A2($Html$Events.onClick,
                                    address,
                                    Click(position))
                                    ,$Html$Attributes.id(position)]),
                       _L.fromArray([getHtmlCode(piece._0)]));
                     case "Nothing":
                     return A2($Html.td,
                       _L.fromArray([$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                                          ,_0: "cursor"
                                                                          ,_1: "default"}]))]),
                       _L.fromArray([]));}
                  _U.badCase($moduleName,
                  "between lines 65 and 73");
               }();
            }();
         };
         var numbers = A2($List.map,
         $Basics.toString,
         _L.range(1,8));
         var letters = _L.fromArray(["A"
                                    ,"B"
                                    ,"C"
                                    ,"D"
                                    ,"E"
                                    ,"F"
                                    ,"G"
                                    ,"H"]);
         return $Html.table(_L.fromArray([$Html$Attributes.id("chessBoard")]))($List.map(function (squares) {
            return $Html.tr(_L.fromArray([]))(A2($List.map,
            renderSquare,
            squares));
         })(A2($List.map,
         function (letter) {
            return A2($List.map,
            function (num) {
               return A2($String.append,
               num,
               letter);
            },
            letters);
         },
         numbers)));
      }();
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: $Model.makeInitialBoard
                                     ,update: update
                                     ,view: renderBoard});
   _elm.Main.values = {_op: _op
                      ,Click: Click
                      ,update: update
                      ,getHtmlCode: getHtmlCode
                      ,renderBoard: renderBoard
                      ,main: main};
   return _elm.Main.values;
};