Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var renderPiece = function (piece) {
      return $Html.text($String.fromChar(function () {
         var _v0 = piece.figure;
         switch (_v0.ctor)
         {case "Bishop":
            return function () {
                 var _v1 = piece.color;
                 switch (_v1.ctor)
                 {case "Black":
                    return _U.chr("♝");
                    case "White":
                    return _U.chr("♗");}
                 _U.badCase($moduleName,
                 "between lines 76 and 80");
              }();
            case "King":
            return function () {
                 var _v2 = piece.color;
                 switch (_v2.ctor)
                 {case "Black":
                    return _U.chr("♚");
                    case "White":
                    return _U.chr("♔");}
                 _U.badCase($moduleName,
                 "between lines 64 and 68");
              }();
            case "Knight":
            return function () {
                 var _v3 = piece.color;
                 switch (_v3.ctor)
                 {case "Black":
                    return _U.chr("♞");
                    case "White":
                    return _U.chr("♘");}
                 _U.badCase($moduleName,
                 "between lines 80 and 84");
              }();
            case "Pawn":
            return function () {
                 var _v4 = piece.color;
                 switch (_v4.ctor)
                 {case "Black":
                    return _U.chr("♟");
                    case "White":
                    return _U.chr("♙");}
                 _U.badCase($moduleName,
                 "between lines 84 and 86");
              }();
            case "Queen":
            return function () {
                 var _v5 = piece.color;
                 switch (_v5.ctor)
                 {case "Black":
                    return _U.chr("♛");
                    case "White":
                    return _U.chr("♕");}
                 _U.badCase($moduleName,
                 "between lines 68 and 72");
              }();
            case "Rook":
            return function () {
                 var _v6 = piece.color;
                 switch (_v6.ctor)
                 {case "Black":
                    return _U.chr("♜");
                    case "White":
                    return _U.chr("♖");}
                 _U.badCase($moduleName,
                 "between lines 72 and 76");
              }();}
         _U.badCase($moduleName,
         "between lines 63 and 86");
      }()));
   };
   var center = _L.fromArray([{ctor: "_Tuple2"
                              ,_0: "text-align"
                              ,_1: "center"}
                             ,{ctor: "_Tuple2"
                              ,_0: "vertical-align"
                              ,_1: "middle"}]);
   var boardStyle = $Html$Attributes.style(A2($Basics._op["++"],
   _L.fromArray([]),
   center));
   var squareStyle = function (color) {
      return function () {
         var bgColor = function () {
            switch (color.ctor)
            {case "Black":
               return {ctor: "_Tuple2"
                      ,_0: "background-color"
                      ,_1: "#808080"};
               case "White":
               return {ctor: "_Tuple2"
                      ,_0: "background-color"
                      ,_1: "#0000"};}
            _U.badCase($moduleName,
            "between lines 48 and 52");
         }();
         return $Html$Attributes.style(A2($List._op["::"],
         bgColor,
         A2($Basics._op["++"],
         _L.fromArray([{ctor: "_Tuple2"
                       ,_0: "float"
                       ,_1: "left"}
                      ,{ctor: "_Tuple2"
                       ,_0: "width"
                       ,_1: "80px"}
                      ,{ctor: "_Tuple2"
                       ,_0: "height"
                       ,_1: "80px"}
                      ,{ctor: "_Tuple2"
                       ,_0: "font-size"
                       ,_1: "400%"}]),
         center)));
      }();
   };
   var renderSquare = function (square) {
      return $Html.td(_L.fromArray([squareStyle(square.color)]))(function () {
         var _v8 = square.piece;
         switch (_v8.ctor)
         {case "Just":
            return _L.fromArray([renderPiece(_v8._0)]);
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 100 and 102");
      }());
   };
   var renderRow = function (squares) {
      return $Html.tr(_L.fromArray([]))(A2($List.map,
      function (square) {
         return function () {
            switch (square.ctor)
            {case "Just":
               return renderSquare(square._0);
               case "Nothing":
               return A2($Html.td,
                 _L.fromArray([]),
                 _L.fromArray([]));}
            _U.badCase($moduleName,
            "between lines 93 and 95");
         }();
      },
      squares));
   };
   var renderBoard = function (board) {
      return function () {
         var getRow = function (positions) {
            return A2($List.map,
            function (key) {
               return A2($Dict.get,
               key,
               board);
            },
            positions);
         };
         return A2($Html.table,
         _L.fromArray([$Html$Attributes.id("chessBoard")]),
         _L.fromArray([A2($Html.tr,
         _L.fromArray([]),
         _L.fromArray([renderRow(getRow(_L.fromArray(["A1"
                                                     ,"B1"
                                                     ,"C1"
                                                     ,"D1"
                                                     ,"E1"
                                                     ,"F1"
                                                     ,"G1"
                                                     ,"H1"])))
                      ,renderRow(getRow(_L.fromArray(["A2"
                                                     ,"B2"
                                                     ,"C2"
                                                     ,"D2"
                                                     ,"E2"
                                                     ,"F2"
                                                     ,"G2"
                                                     ,"H2"])))
                      ,renderRow(getRow(_L.fromArray(["A3"
                                                     ,"B3"
                                                     ,"C3"
                                                     ,"D3"
                                                     ,"E3"
                                                     ,"F3"
                                                     ,"G3"
                                                     ,"H3"])))
                      ,renderRow(getRow(_L.fromArray(["A4"
                                                     ,"B4"
                                                     ,"C4"
                                                     ,"D4"
                                                     ,"E4"
                                                     ,"F4"
                                                     ,"G4"
                                                     ,"H4"])))
                      ,renderRow(getRow(_L.fromArray(["A5"
                                                     ,"B5"
                                                     ,"C5"
                                                     ,"D5"
                                                     ,"E5"
                                                     ,"F5"
                                                     ,"G5"
                                                     ,"H5"])))
                      ,renderRow(getRow(_L.fromArray(["A6"
                                                     ,"B6"
                                                     ,"C6"
                                                     ,"D6"
                                                     ,"E6"
                                                     ,"F6"
                                                     ,"G6"
                                                     ,"H6"])))
                      ,renderRow(getRow(_L.fromArray(["A7"
                                                     ,"B7"
                                                     ,"C7"
                                                     ,"D7"
                                                     ,"E7"
                                                     ,"F7"
                                                     ,"G7"
                                                     ,"H7"])))
                      ,renderRow(getRow(_L.fromArray(["A8"
                                                     ,"B8"
                                                     ,"C8"
                                                     ,"D8"
                                                     ,"E8"
                                                     ,"F8"
                                                     ,"G8"
                                                     ,"H8"])))]))]));
      }();
   };
   var main = renderBoard($Model.makeInitialBoard);
   var Click = function (a) {
      return {ctor: "Click",_0: a};
   };
   _elm.Main.values = {_op: _op
                      ,Click: Click
                      ,center: center
                      ,boardStyle: boardStyle
                      ,squareStyle: squareStyle
                      ,renderPiece: renderPiece
                      ,renderRow: renderRow
                      ,renderSquare: renderSquare
                      ,renderBoard: renderBoard
                      ,main: main};
   return _elm.Main.values;
};