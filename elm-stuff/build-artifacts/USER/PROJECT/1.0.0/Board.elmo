Elm.Board = Elm.Board || {};
Elm.Board.make = function (_elm) {
   "use strict";
   _elm.Board = _elm.Board || {};
   if (_elm.Board.values)
   return _elm.Board.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Board",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var zip = $List.map2(F2(function (v0,
   v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }));
   var square = F2(function (c,p) {
      return {_: {}
             ,color: c
             ,piece: p};
   });
   var Square = F2(function (a,b) {
      return {_: {}
             ,color: b
             ,piece: a};
   });
   var piece = F3(function (f,
   c,
   m) {
      return {_: {}
             ,color: c
             ,figure: f
             ,moved: m};
   });
   var Piece = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: c
             ,figure: a
             ,moved: b};
   });
   var King = {ctor: "King"};
   var Queen = {ctor: "Queen"};
   var Rook = {ctor: "Rook"};
   var Bishop = {ctor: "Bishop"};
   var Knight = {ctor: "Knight"};
   var Pawn = {ctor: "Pawn"};
   var Player = function (a) {
      return {_: {},color: a};
   };
   var White = {ctor: "White"};
   var Black = {ctor: "Black"};
   var other = function (color) {
      return function () {
         switch (color.ctor)
         {case "Black": return White;
            case "White": return Black;}
         _U.badCase($moduleName,
         "between lines 13 and 15");
      }();
   };
   var makeInitialBoard = function () {
      var emptyRow = function (color) {
         return A3($List.map2,
         square,
         $List.concat(A2($List.repeat,
         4,
         _L.fromArray([color
                      ,other(color)]))),
         A2($List.repeat,
         8,
         $Maybe.Nothing));
      };
      var pawnRow = F2(function (pawnColor,
      firstSquareColor) {
         return A3($List.map2,
         square,
         $List.concat(A2($List.repeat,
         4,
         _L.fromArray([firstSquareColor
                      ,other(firstSquareColor)]))),
         $List.repeat(8)($Maybe.Just(A3(piece,
         Pawn,
         pawnColor,
         false))));
      });
      return $Dict.fromList(A2($Basics._op["++"],
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: "A8"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Rook,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "B8"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Knight,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "C8"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Bishop,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "D8"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    King,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "E8"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Queen,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "F8"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Bishop,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "G8"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Knight,
                    Black,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "H8"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Rook,
                    Black,
                    false)))}]),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A7"
                   ,"B7"
                   ,"C7"
                   ,"D7"
                   ,"E7"
                   ,"F7"
                   ,"G7"
                   ,"H7"]),
      A2(pawnRow,Black,White)),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A6"
                   ,"B6"
                   ,"C6"
                   ,"D6"
                   ,"E6"
                   ,"F6"
                   ,"G6"
                   ,"H6"]),
      emptyRow(White)),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A5"
                   ,"B5"
                   ,"C5"
                   ,"D5"
                   ,"E5"
                   ,"F5"
                   ,"G5"
                   ,"H5"]),
      emptyRow(Black)),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A4"
                   ,"B4"
                   ,"C4"
                   ,"D4"
                   ,"E4"
                   ,"F4"
                   ,"G4"
                   ,"H4"]),
      emptyRow(White)),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A3"
                   ,"B3"
                   ,"C3"
                   ,"D3"
                   ,"E3"
                   ,"F3"
                   ,"G3"
                   ,"H3"]),
      emptyRow(Black)),
      A2($Basics._op["++"],
      A2(zip,
      _L.fromArray(["A2"
                   ,"B2"
                   ,"C2"
                   ,"D2"
                   ,"E2"
                   ,"F2"
                   ,"G2"
                   ,"H2"]),
      A2(pawnRow,White,White)),
      _L.fromArray([{ctor: "_Tuple2"
                    ,_0: "A1"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Rook,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "B1"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Knight,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "C1"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Bishop,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "D1"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Queen,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "E1"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    King,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "F1"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Bishop,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "G1"
                    ,_1: square(Black)($Maybe.Just(A3(piece,
                    Knight,
                    White,
                    false)))}
                   ,{ctor: "_Tuple2"
                    ,_0: "H1"
                    ,_1: square(White)($Maybe.Just(A3(piece,
                    Rook,
                    White,
                    false)))}])))))))));
   }();
   _elm.Board.values = {_op: _op
                       ,Black: Black
                       ,White: White
                       ,other: other
                       ,Player: Player
                       ,Pawn: Pawn
                       ,Knight: Knight
                       ,Bishop: Bishop
                       ,Rook: Rook
                       ,Queen: Queen
                       ,King: King
                       ,Piece: Piece
                       ,piece: piece
                       ,Square: Square
                       ,square: square
                       ,zip: zip
                       ,makeInitialBoard: makeInitialBoard};
   return _elm.Board.values;
};