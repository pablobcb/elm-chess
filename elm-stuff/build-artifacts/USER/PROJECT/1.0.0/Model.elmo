Elm.Model = Elm.Model || {};
Elm.Model.make = function (_elm) {
   "use strict";
   _elm.Model = _elm.Model || {};
   if (_elm.Model.values)
   return _elm.Model.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Model",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var game = F3(function (board,
   p1,
   p2) {
      return {_: {}
             ,board: board
             ,player1: p1
             ,player2: p2};
   });
   var Game = F3(function (a,b,c) {
      return {_: {}
             ,board: a
             ,player1: b
             ,player2: c};
   });
   var Player = F2(function (a,b) {
      return {_: {}
             ,color: a
             ,graveyard: b};
   });
   var emptyRow = A2($List.repeat,
   8,
   $Maybe.Nothing);
   var piece = F2(function (f,c) {
      return {_: {}
             ,color: c
             ,figure: f
             ,moved: false};
   });
   var Piece = F3(function (a,
   b,
   c) {
      return {_: {}
             ,color: c
             ,figure: a
             ,moved: b};
   });
   var King = {ctor: "King"};
   var Queen = {ctor: "Queen"};
   var Rook = {ctor: "Rook"};
   var Bishop = {ctor: "Bishop"};
   var Knight = {ctor: "Knight"};
   var Pawn = {ctor: "Pawn"};
   var player = function (color) {
      return {_: {}
             ,color: color
             ,graveyard: $List.repeat(16)($Maybe.Just(Pawn))};
   };
   var White = {ctor: "White"};
   var Black = {ctor: "Black"};
   var other = function (color) {
      return function () {
         switch (color.ctor)
         {case "Black": return White;
            case "White": return Black;}
         _U.badCase($moduleName,
         "between lines 15 and 20");
      }();
   };
   var makeInitialBoard = function () {
      var zip = $List.map2(F2(function (v0,
      v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }));
      var makeRow = function (number) {
         return A2(zip,
         _L.fromArray([_U.chr("A")
                      ,_U.chr("B")
                      ,_U.chr("C")
                      ,_U.chr("D")
                      ,_U.chr("E")
                      ,_U.chr("F")
                      ,_U.chr("G")
                      ,_U.chr("H")]),
         A2($List.repeat,8,number));
      };
      var makePiece = F2(function (pieceColor,
      figure) {
         return $Maybe.Just(A2(piece,
         figure,
         pieceColor));
      });
      var makeFirstRow = function (color) {
         return A2($List.map,
         makePiece(color),
         _L.fromArray([Rook
                      ,Knight
                      ,Bishop
                      ,Queen
                      ,King
                      ,Bishop
                      ,Knight
                      ,Rook]));
      };
      var pawnRow = function (pawnColor) {
         return $List.repeat(8)($Maybe.Just(A2(piece,
         Pawn,
         pawnColor)));
      };
      return $Dict.fromList(A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("8")),
      makeFirstRow(Black)),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("7")),
      pawnRow(Black)),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("6")),
      emptyRow),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("5")),
      emptyRow),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("4")),
      emptyRow),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("3")),
      emptyRow),
      A2($Basics._op["++"],
      A2(zip,
      makeRow(_U.chr("2")),
      pawnRow(White)),
      A2(zip,
      makeRow(_U.chr("1")),
      makeFirstRow(White))))))))));
   }();
   var makeInitialGame = A3(game,
   makeInitialBoard,
   player(Black),
   player(White));
   _elm.Model.values = {_op: _op
                       ,Black: Black
                       ,White: White
                       ,other: other
                       ,Pawn: Pawn
                       ,Knight: Knight
                       ,Bishop: Bishop
                       ,Rook: Rook
                       ,Queen: Queen
                       ,King: King
                       ,Piece: Piece
                       ,piece: piece
                       ,emptyRow: emptyRow
                       ,makeInitialBoard: makeInitialBoard
                       ,Player: Player
                       ,Game: Game
                       ,player: player
                       ,game: game
                       ,makeInitialGame: makeInitialGame};
   return _elm.Model.values;
};